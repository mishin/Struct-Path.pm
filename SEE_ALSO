====== Nested Data ======

Data::Diver                     # $value= Dive( $root, qw( top 1 second key 3 three exists ) );
Data::DPath                     # '/AAA/BBB/CCC/*[1]'
Data::DRef                      # set_value_for_dref( $report, 'employees.3.name', 'Joe' );
Data::Focus                     # paths are arrays but still wo types
Data::Hierarchy                 # $tree->get('/some/path')->{'.color'};
Data::Nested                    # $obj->value($nds,"/foo/2/bar");
Data::PathSimple                # slash based, wo filters
Data::Reach                     # reach $data_tree, @path; walking down the tree and choosing subnodes according to values given in @path (which should be a list of scalar values).
Data::Spath                     # slash based, no filters
Hash::Path                      # hashes only, module was written as proof of concept
Json::Path                      # '$.store.book[*]'
MarpaX::xPathLike               # '/*/invoice[Total>100]/Total'
Path::Resolver::Resolver::Hash  # $resolver->entity_at('foo/bar.txt');
Sereal::Path                    # looks like JSON::Path

===== Files =====
Path::Tiny
Path::Iter
Path::Resolve
Path::FindDev
Path::Naive
Path::IsDev
Path::Class
Path::Abstract
Config::Path
Path::Mapper
Module::Path
Path::Canonical
Path::Resolver
Path::Extended
Complete::Path

===== URI =====
Path::Router
Mojo::Path
